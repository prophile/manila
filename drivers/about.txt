This is a list of available manila drivers.

=== background ===

Use PCNTL to fork and do some tasks asynchronously in the background.

Parameters:
  child - sub-driver

=== cache_apc ===

This driver uses APC to cache key lists and data.

Parameters:
  child - sub-driver
  ttl - cache expire time in seconds, 0 = no expiry (default: 0)
  prefix - prefix to add to all keys (default: none)

=== cache_local ===

This driver stores a local cache in memory of values, to avoid lookups for list_keys, index lookup and fetch. This does not persist between sessions.

Parameters:
  child - sub-driver

=== cache_memcache ===

This driver uses APC to cache key lists and data.

Parameters:
  child - sub-driver
  ttl - cache expire time in seconds, 0 = no expiry (default: 0)
  prefix - prefix to add to all keys (default: none)
  servers - one or a list of servers, in the form <host> (port) (persistent) (weight)

=== cluster ===

This driver shares data among multiple sub-drivers, and with a small degree of duplication of data, automatic healing, and other such buzzwords.

Parameters:
  unique_id - a unique name for this entry
  fail_list - a file which stores a list of sub-nodes which have died
  master - a sub-driver which stores indices and a DB of failing sub-drivers
  duplication - the number of copies of each row to keep (default: 3)
  child - an array of sub-drivers

=== duplicate ===

This driver duplicates data across several sub-drivers, and automatically heals data on optimise.

Parameters:
  child - array of sub-drivers
  
=== meta_map ===

Maps all calls to meta_read and meta_write, for backends which only implement a key-value store for metadata.

Parameters:
  child - sub-driver
  
=== mysql ===

This is a storage driver which stores data in a MySQL database.

Parameters:
  host - the host of the MySQL server
  username - the username
  password - i'm spotting a pattern here
  database - name of the database to use
  meta - whether or not to maintain a meta-table
  keysub - substitute key field names, as pairs of table:keyname

=== logger ===

This driver logs all calls, mainly for debugging purposes, before passing them on to the child.

Parameters:
  child - sub-driver

=== partition ===

This driver partitions data between sub-drivers, by key.

Parameters:
  child - array of sub-drivers

=== passthrough ===

This driver redirects calls to a sub-driver.

Parameters:
  child - sub-driver

=== read_ahead ===

This driver reads blocks of numeric keys for faster access.

Parameters:
  child - sub-driver
  length - block size to read (default: 30)

=== read_only ===

This driver makes the underlying storage read-only.

Parameters:
  child - sub-driver
  strict - abort on write rather than outputting warning (default: false)

=== serialize ===

This is a basic storage driver which stores data on the filesystem.

Parameters:
  directory - the path to the (already existing) directory to use

=== sink ===

This is a storage driver which discards all incoming values and always returns not found on lookup. This is mainly useful for data which is to be stored only in caches, which can use a sink driver as a child.

Parameters:
  none

=== splitter ===

This driver splits requests for different tables off to sub-drivers. It is suggested that you have a catch-all as a last resort. Metadata will go to the driver which matches the table name __meta

Parameters:
  fnmatch-style patterns => sub-drivers
